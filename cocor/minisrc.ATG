import java.util.ArrayList;

COMPILER Minisrc

public static int intValue (String str) {
  return str.toLowerCase().startsWith("0b")? Integer.parseUnsignedInt(str.substring(2), 2) : Integer.decode(str);
}

Mem mem = new Mem();
boolean debug = false;

IGNORECASE

CHARACTERS
  lLetter = 'A'..'Z' + 'a'..'z'.
  lDigit = '0'..'9'.
  lNonZero = lDigit - '0'.
  lBinDigit = '0' + '1'.
  lHexDigit = lDigit + "ABCDEF".
  lNonDIgit = ANY - lDigit.

TOKENS
  pNumber = ['-']
  		(lNonZero {lDigit}
         | "0"
         | "0x" lHexDigit {lHexDigit}
         | "0b" lBinDigit {lBinDigit}).
  pLabel = ["_"] lLetter {lLetter | lDigit} ":".
  pLd = "ld".
  pLdi = "ldi".
  pSt = "st".
  pAdd = "add".
  pSub = "sub".
  pAnd = "and".
  pOr = "or".
  pShr = "shr".
  pShra = "shra".
  pShl = "shl".
  pRor = "ror".
  pRol = "rol".
  pAddi = "addi".
  pAndi = "andi".
  pOri = "ori".
  pMul = "mul".
  pDiv = "div".
  pNeg = "neg".
  pNot = "not".
  pBrzr = "brzr".
  pBrnz = "brnz".
  pBrpl = "brpl".
  pBrmi = "brmi".
  pJr = "jr".
  pJal = "jal".
  pIn = "in".
  pOut = "out".
  pMfhi = "mfhi".
  pMflo = "mflo".
  pNop = "nop".
  pHalt = "halt".
  pOrg = ".org".
  pWord = ".word".
  pByte = ".byte".
  pSkip = ".skip".

COMMENTS FROM "//" TO '\n'
COMMENTS FROM "/*" TO "*/" NESTED

IGNORE '\r' + '\n' + '\t' + '\f'

PRODUCTIONS

  Minisrc = {(orgDirect | Instr | data) ['\n']}.

  Instr =             (. Word word = new Word(); .)
  (
    ldInstr<out word>
  | ldiInstr<out word>
  | stInstr<out word>
  | addInstr<out word>
  | subInstr<out word>
  | andInstr<out word>
  | orInstr<out word>
  | shrInstr<out word>
  | shraInstr<out word>
  | shlInstr<out word>
  | rorInstr<out word>
  | rolInstr<out word>
  | addiInstr<out word>
  | andiInstr<out word>
  | oriInstr<out word>
  | mulInstr<out word>
  | divInstr<out word>
  | negInstr<out word>
  | notInstr<out word>
  | brzrInstr<out word>
  | brnzInstr<out word>
  | brplInstr<out word>
  | brmiInstr<out word>
  | jrInstr<out word>
  | jalInstr<out word>
  | inInstr<out word>
  | outInstr<out word>
  | mfhiInstr<out word>
  | mfloInstr<out word>
  | nopInstr <out word>
  | haltInstr <out word>
  )

  (. mem.addWord(word.get()); .)
  (. if(debug) {.)
  (. 	System.out.println(String.format("%32s", Integer.toBinaryString(word.get())).replace(' ', '0')); .)
  (. 	System.out.println("|   ||  ||  ||                 |"); .)
  (. } .)
  .

  ldInstr<out Word word> =
                (. int ra, rb; .)
                (. word = new Word(); .)
    pLd         (. word.op(0b00000); .)
    reg<out ra> (. word.ra(ra); .)
    ","
    pNumber     (. int imm = intValue(t.val); .)
                (. word.imm(imm); .)
    ["("
    reg<out rb> (. word.rb(rb); .)
    ")"]
    .

  ldiInstr<out Word word> =
                (. int ra, rb; .)
                (. word = new Word(); .)
    pLdi        (. word.op(0b00001); .)
    reg<out ra> (. word.ra(ra); .)
    ","
    pNumber     (. int imm = intValue(t.val); .)
                (. word.imm(imm); .)
    ["("
    reg<out rb> (. word.rb(rb); .)
    ")"]
    .

  stInstr<out Word word> =
                (. int ra, rb; .)
                (. word = new Word(); .)
    pSt         (. word.op(0b00010); .)
    pNumber     (. int imm = intValue(t.val); .)
                (. word.imm(imm); .)
    ["("
    reg<out rb> (. word.rb(rb); .)
    ")"]
    ","
    reg<out ra> (. word.ra(ra); .)
    .

  addInstr<out Word word> =
                (. int ra, rb; .)
                (. word = new Word(); .)
    pAdd        (. word.op(0b00011); .)
    rType<out word, word>.

  subInstr<out Word word> =
                (. int ra, rb; .)
                (. word = new Word(); .)
    pSub        (. word.op(0b00100); .)
    rType<out word, word>.

  andInstr<out Word word> =
                (. int ra, rb; .)
                (. word = new Word(); .)
    pAnd        (. word.op(0b00101); .)
    rType<out word, word>.

  orInstr<out Word word> =
                (. int ra, rb; .)
                (. word = new Word(); .)
    pOr         (. word.op(0b00110); .)
    rType<out word, word>.

  shrInstr<out Word word> =
                (. int ra, rb; .)
                (. word = new Word(); .)
    pShr        (. word.op(0b00111); .)
    rType<out word, word>.

  shraInstr<out Word word> =
                (. int ra, rb; .)
                (. word = new Word(); .)
    pShra       (. word.op(0b01000); .)
    rType<out word, word>.

  shlInstr<out Word word> =
                (. int ra, rb; .)
                (. word = new Word(); .)
    pShl        (. word.op(0b01001); .)
    rType<out word, word>.

  rorInstr<out Word word> =
                (. int ra, rb; .)
                (. word = new Word(); .)
    pRor        (. word.op(0b01010); .)
    rType<out word, word>.

  rolInstr<out Word word> =
                (. int ra, rb; .)
                (. word = new Word(); .)
    pRol        (. word.op(0b01011); .)
    rType<out word, word>.

  rType <out Word word, Word wordIn>=
                      (. int ra = 0; .)
                      (. int rb = 0; .)
                      (. int rc = 0; .)
    reg<out ra>       (. wordIn.ra(ra); .)
    "," reg<out rb>   (. wordIn.rb(rb); .)
    "," reg<out rc>   (. wordIn.rc(rc); .)
                      (. word = wordIn; .)
    .

  addiInstr<out Word word> =
                (. word = new Word(); .)
    pAddi       (. word.op(0b01100); .)
    iType<out word, word>
    .

  andiInstr<out Word word> =
                (. word = new Word(); .)
    pAndi       (. word.op(0b01101); .)
    iType<out word, word>
    .

  oriInstr<out Word word> =
                (. word = new Word(); .)
    pOri        (. word.op(0b01110); .)
    iType<out word, word>
    .

  iType <out Word word, Word wordIn>=
                      (. int ra = 0; .)
                      (. int rb = 0; .)
    reg<out ra>       (. wordIn.ra(ra); .)
    "," reg<out rb>   (. wordIn.rb(rb); .)
    "," pNumber       (. int imm = intValue(t.val); .)
                      (. wordIn.imm(imm); .)
                      (. word = wordIn; .)
    .

  mulInstr<out Word word> =
            (. word = new Word(); .)
    pMul    (. word.op(0b01111); .)
    r2Type<out word, word>
    .

  divInstr<out Word word> =
            (. word = new Word(); .)
    pDiv    (. word.op(0b10000); .)
    r2Type<out word, word>
    .

  negInstr<out Word word> =
            (. word = new Word(); .)
    pNeg    (. word.op(0b10001); .)
    r2Type<out word, word>
    .

  notInstr<out Word word> =
            (. word = new Word(); .)
    pNot    (. word.op(0b10010); .)
    r2Type<out word, word>
    .

  brzrInstr<out Word word> =
                (. int ra; .)
                (. word = new Word(); .)
    pBrzr       (. word.op(0b10011); .)
                (. word.c2(0b0000); .)
    reg<out ra> (. word.ra(ra); .)
    ","
    pNumber     (. int imm = intValue(t.val); .)
                (. word.imm(imm); .)
    .

  brnzInstr<out Word word> =
                (. int ra; .)
                (. word = new Word(); .)
    pBrnz       (. word.op(0b10011); .)
                (. word.c2(0b0001); .)
    reg<out ra> (. word.ra(ra); .)
    ","
    pNumber     (. int imm = intValue(t.val); .)
                (. word.imm(imm); .)
    .

  brplInstr<out Word word> =
                (. int ra; .)
                (. word = new Word(); .)
    pBrpl       (. word.op(0b10011); .)
                (. word.c2(0b0010); .)
    reg<out ra> (. word.ra(ra); .)
    ","
    pNumber     (. int imm = intValue(t.val); .)
                (. word.imm(imm); .)
    .

  brmiInstr<out Word word> =
                (. int ra; .)
                (. word = new Word(); .)
    pBrmi       (. word.op(0b10011); .)
                (. word.c2(0b0011); .)
    reg<out ra> (. word.ra(ra); .)
    ","
    pNumber     (. int imm = intValue(t.val); .)
                (. word.imm(imm); .)
    .

  r2Type <out Word word, Word wordIn> =
                      (. int ra = 0; .)
                      (. int rb = 0; .)
    reg<out ra>       (. wordIn.ra(ra); .)
    "," reg<out rb>   (. wordIn.rb(rb); .)
                      (. word = wordIn; .)
    .

  jrInstr <out Word word> =
             (. word = new Word(); .)
             (. int ra = 0; .)
    pJr      (. word.op(0b10100); .)
    reg<out ra> (. word.ra(ra); .)
    .

  jalInstr <out Word word> =
             (. word = new Word(); .)
             (. int ra = 0; .)
    pJal     (. word.op(0b10101); .)
    reg<out ra> (. word.ra(ra); .)
    .

  inInstr <out Word word> =
             (. word = new Word(); .)
             (. int ra = 0; .)
    pIn      (. word.op(0b10111); .)
    reg<out ra> (. word.ra(ra); .)
    .

  outInstr <out Word word> =
             (. word = new Word(); .)
             (. int ra = 0; .)
    pOut     (. word.op(0b11000); .)
    reg<out ra> (. word.ra(ra); .)
    .

  mfhiInstr <out Word word> =
             (. word = new Word(); .)
             (. int ra = 0; .)
    pMfhi    (. word.op(0b11001); .)
    reg<out ra> (. word.ra(ra); .)
    .

  mfloInstr <out Word word> =
             (. word = new Word(); .)
             (. int ra = 0; .)
    pMflo    (. word.op(0b11010); .)
    reg<out ra> (. word.ra(ra); .)
    .

  reg <out int regIdent> =
    ("r" | "R") pNumber (. regIdent = intValue(t.val); .)
    .

  nopInstr <out Word word> =
            (. word = new Word(); .)
    pNop    (. word.op(0b11011); .)
    .

  haltInstr <out Word word> =
            (. word = new Word(); .)
    pHalt    (. word.op(0b11100); .)
    .

  orgDirect =
    pOrg
    pNumber   (. int addr = intValue(t.val); .)
              (. mem.advPtr(addr); .)
    .

  data =
      Word
    | Byte.

  Word =
    pWord
    pNumber (. mem.addWord(intValue(t.val)); .)
    {
      pNumber (. mem.addWord(intValue(t.val)); .)
    }
    .

  Byte =      (. int word = 0; .)
    pByte     (. int cnt = 0; .)
    pNumber (. word |= (intValue(t.val) & 0xff) << (cnt++ * 8); .)
    {
      pNumber (. word |= (intValue(t.val) & 0xff) << (cnt * 8); .)
              (. if (++cnt == 4) { .)
              (.   mem.addWord(word); .)
              (.   cnt = 0; .)
              (.   word = 0; .)
              (. } .)
    }         (. mem.addWord(word); .)
    .

END Minisrc.